[
{
	"uri": "/faq/r_package/errors_01.html",
	"title": "R Pack Debug",
	"tags": ["error", "warning", "debug"],
	"description": "",
	"content": "2021-03-05, FCA Collin\nErrors and Warnings with R @export may only span a single line  Context: documenting a package with devtools::document() (ctrl+shift+d in RStudio). Problem: I am use to copy my example at the end of the function documentation, somtimes I forget to add the @examples tag. Correction: add @examples before the example. "
},
{
	"uri": "/r_content/roc_01/roc_01.html",
	"title": "ROC Curves",
	"tags": ["ROC", "graph", "ggplot2"],
	"description": "",
	"content": "2021-01-11, FCA Collin (update 2021-01-12)\nPresentation The Receiver Operating Characteristic (ROC) is a general representation of a binary classifier; it accounts for:\n the sensitivity (the proportion of real positive case detected), the false positive rate (1 - sensitivity), the general performance via the area under the ROC curve (AUC).  The classifier for the example identifies tumour tissues (yes/no) in the case of lung cancer (LC) or eventually identifies the Squamous Cell Carcinoma (SCC) histological subtype. The dataset used for the graphic requires at least columns for the sensitivity, the false-positive rate and a decision rule represented by a threshold proportion, in that case varying from 0 to 1. Additionally, information about the classifier itself can include the model identification (LC, SCC), as well as the AUC (+ confidence interval estimation) as a overall evaluation of the models.\nData Lets dtaplot being as example dataset such as:\n First row of the dataset behind the ROC curves.  Threshold Sensitivity Specificity FalseAlarm ntree auc.ci auc Diag    Inf 0.0000000 1 0 10000 0.925-0.984 0.954 2) SCC  Inf 0.0000000 1 0 10000 0.938-0.989 0.964 1) LC  0.96445 0.0097087 1 0 10000 0.925-0.984 0.954 2) SCC  0.95860 0.0194175 1 0 10000 0.925-0.984 0.954 2) SCC  0.95375 0.0291262 1 0 10000 0.925-0.984 0.954 2) SCC  0.95285 0.0388350 1 0 10000 0.925-0.984 0.954 2) SCC    Some decision rules (threshold) were of interest:\n Min. error is the threshold for which the classifier overall error was at its minimum. Sens. 90%: has its better not to miss true positive patients, the threshold may be determined so as to catch 90% of true positive patient (sensibility), eventually at a cost in terms of overall error as it then automatically increase the false-alarm rate.  Lets threshold being the supplementary data characterising this two decision rules:\n`Threshold, the decision rules.    Threshold Sensitivity Specificity FalseAlarm ntree auc.ci auc Diag target Rational    0.48965 0.9368421 0.9375000 0.0625000 10000 0.938-0.989 0.964 1) LC 0.0103500 Min. error  0.49350 0.8640777 0.9813953 0.0186047 10000 0.925-0.984 0.954 2) SCC 0.0065000 Min. error  0.69835 0.9000000 0.9687500 0.0312500 10000 0.938-0.989 0.964 1) LC 0.0000000 Sens. 90%  0.35290 0.9029126 0.9441860 0.0558140 10000 0.925-0.984 0.954 2) SCC 0.0029126 Sens. 90%    Graphic The example is based on the package ggplot2, plus the optional ggthemr which provides graphical themes, for instance the themeflat.\nlibrary(ggplot2) if(require(ggthemr)) ggthemr::ggthemr(\u0026quot;flat\u0026quot;)  Basic The minimal ROC representation is simply a line plot representing the sensitivity as a function of the false alarm rate, for one or the other model.\nggplot( data = dtaplot, mapping = aes( x = FalseAlarm, y = Sensitivity, color = Diag ) ) + geom_line( lwd = 1 ) + facet_grid( . ~ Diag )  Aesthetic improvement Aesthetic can help improving the reading:\n the area under the curve is of interest, therefore it can be filled. the bisector delimits a model performing as good as a decision made flipping a coin (the reference model). sensibility and false-alarm rate are define from 0 to 1, the length of this two axis should equal.  { ggplot( data = dtaplot, mapping = aes( x = FalseAlarm, y = Sensitivity, ymax = Sensitivity, fill = Diag, color = Diag ) ) + geom_ribbon( ymin = 0, alpha = .5, color = NA ) + geom_line( lwd = 1 ) + geom_abline( slope = 1, intercept = 0, col = \u0026quot;gray50\u0026quot;, lwd = 2, lty = 2 ) + xlab( \u0026quot;False Alarm Rate (1 - specificity)\u0026quot; ) + facet_grid( . ~ Diag ) + theme( asp = 1 ) }  Other data for more annotations The use of the model for diagnostic demands to define a threshold, various rational can be used, in the example two thresholds were defined: the minimal error, the 90% detection of positive case. Points can identify this threshold and performance on the ROC curve.\n{ ggplot( data = dtaplot, mapping = aes( x = FalseAlarm, y = Sensitivity, ymax = Sensitivity, fill = Diag, color = Diag ) ) + geom_ribbon( ymin = 0, alpha = .5, color = NA ) + geom_line( lwd = 1 ) + geom_abline( slope = 1, intercept = 0, col = \u0026quot;gray50\u0026quot;, lwd = 2, lty = 2 ) + xlab( \u0026quot;False Alarm Rate (1 - specificity)\u0026quot; ) + facet_grid( . ~ Diag ) + theme( asp = 1 ) + geom_point( data = threshold, mapping = aes(shape = Rational, colour = Rational), size = 3 ) }  The plot can be further personalised manipulating the theme locally to address for instance the positioning of the legend and other settings.\n{ ggplot( data = dtaplot, mapping = aes( x = FalseAlarm, y = Sensitivity, ymax = Sensitivity, fill = Diag, color = Diag ) ) + geom_ribbon( ymin = 0, alpha = .5, color = NA ) + geom_line( lwd = 1 ) + geom_abline( slope = 1, intercept = 0, col = \u0026quot;gray50\u0026quot;, lwd = 2, lty = 2 ) + xlab( \u0026quot;False Alarm Rate (1 - specificity)\u0026quot; ) + facet_grid( . ~ Diag ) + geom_point( data = threshold, mapping = aes(shape = Rational, colour = Rational), size = 3 ) + theme( asp = 1, legend.position = \u0026quot;bottom\u0026quot;, legend.text = element_text(size = 8), legend.title = element_text(size = 8), legend.background = element_rect(fill = \u0026quot;transparent\u0026quot;), plot.background = element_rect(fill = alpha(\u0026quot;white\u0026quot;, .5), colour = 'white') ) }  Final Finally, as a last piece of annotation, the AUC given with its confidence interval may help for further comparison.\n{ ggplot( data = dtaplot, mapping = aes( x = FalseAlarm, y = Sensitivity, ymax = Sensitivity, fill = Diag, color = Diag ) ) + geom_ribbon( ymin = 0, alpha = .5, color = NA ) + geom_line( lwd = 1 ) + geom_abline( slope = 1, intercept = 0, col = \u0026quot;gray50\u0026quot;, lwd = 2, lty = 2 ) + xlab( \u0026quot;False Alarm Rate (1 - specificity)\u0026quot; ) + facet_grid( . ~ Diag ) + geom_point( data = threshold, mapping = aes(shape = Rational, colour = Rational), size = 3 ) + theme( asp = 1, legend.position = \u0026quot;bottom\u0026quot;, legend.text = element_text(size = 8), legend.title = element_text(size = 8), legend.background = element_rect(fill = \u0026quot;transparent\u0026quot;), plot.background = element_rect(fill = alpha(\u0026quot;white\u0026quot;, .5), colour = 'white') ) + geom_label( data = aggregate(auc.ci ~ Diag + ntree, data = dtaplot, unique), mapping = aes(label = auc.ci, ymax = NULL, fill = NULL, color = NULL , x = .5, y = .5 ) ) }  sessionInfo() ## R version 4.0.3 (2020-10-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Debian GNU/Linux 10 (buster) ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.3.5.so ## ## locale: ## [1] LC_CTYPE=en_GB.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_GB.UTF-8 LC_COLLATE=en_GB.UTF-8 ## [5] LC_MONETARY=en_GB.UTF-8 LC_MESSAGES=en_GB.UTF-8 ## [7] LC_PAPER=en_GB.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] ggthemr_1.1.0 ggplot2_3.3.2 ## ## loaded via a namespace (and not attached): ## [1] knitr_1.29 magrittr_1.5 tidyselect_1.1.0 munsell_0.5.0 ## [5] colorspace_1.4-1 R6_2.4.1 rlang_0.4.7 dplyr_1.0.2 ## [9] stringr_1.4.0 highr_0.8 tools_4.0.3 grid_4.0.3 ## [13] gtable_0.3.0 xfun_0.16 withr_2.2.0 htmltools_0.5.0 ## [17] ellipsis_0.3.1 yaml_2.2.1 digest_0.6.25 tibble_3.0.3 ## [21] lifecycle_0.2.0 crayon_1.3.4 farver_2.0.3 purrr_0.3.4 ## [25] vctrs_0.3.4 glue_1.4.2 evaluate_0.14 rmarkdown_2.3 ## [29] labeling_0.3 stringi_1.4.6 compiler_4.0.3 pillar_1.4.6 ## [33] generics_0.0.2 scales_1.1.1 pkgconfig_2.0.3 "
},
{
	"uri": "/quickstart.html",
	"title": "Quickstart",
	"tags": [],
	"description": "",
	"content": "The content is directly added in the content folder, the directory tree is used for the table of content.\nIt becomes handy when other programs can render md files such as R which can render markdown files. With good parameters, the result will fit perfectly in this webpage.\n"
},
{
	"uri": "/r_content.html",
	"title": "R Content",
	"tags": [],
	"description": "",
	"content": "In content/r_content/, R outputs are organised in folder, a folder corresponds to an item in the navigation menu.\n"
},
{
	"uri": "/faq.html",
	"title": "FAQ",
	"tags": [],
	"description": "",
	"content": "I regularly encounter some errors, it may be time to keep track of them and propose standard resolutions.\n"
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/debug.html",
	"title": "Debug",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/error.html",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/ggplot2.html",
	"title": "Ggplot2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/graph.html",
	"title": "Graph",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "Learn Theme for Hugo",
	"tags": [],
	"description": "",
	"content": " Welcome This is an example of static web page generated by Hugo. No big knowledge of html, Hugo comes with features ready to be used, even augmented by themes. For instance this theme has nice feature for project documentation, included but not restricted to:\n keyword search box in the top-left corner. content folder structure corresponding to the left expandable navigation menu. the code is highlighted.  Try the search box in the top-left corner and look for ggplot2.\n Check the source GitHub repository, check directory hugo.\nThe user simply edits the content folder with markdown files, adds figures, docs, or other elements in the static folder and run the commandhugoto render the webpage in thepublic` folder. Nicely, with the following comment the website is dynamically rendered at http://localhost:1313/ and modifications of the source are automatically rendered.\nhugo server  Credits  Hugo-theme-learn is a theme for Hugo, a fast and modern static website engine written in Go.  "
},
{
	"uri": "/tags/roc.html",
	"title": "Roc",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/warning.html",
	"title": "Warning",
	"tags": [],
	"description": "",
	"content": ""
}]